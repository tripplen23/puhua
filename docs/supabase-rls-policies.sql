-- Puhua Finnish Learning App - Row Level Security (RLS) Policies
-- This file contains all RLS policies for securing user data in Supabase

-- Enable RLS on all tables
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE videos ENABLE ROW LEVEL SECURITY;
ALTER TABLE segments ENABLE ROW LEVEL SECURITY;
ALTER TABLE practice_sessions ENABLE ROW LEVEL SECURITY;
ALTER TABLE audio_recordings ENABLE ROW LEVEL SECURITY;
ALTER TABLE vocabulary_notes ENABLE ROW LEVEL SECURITY;

-- =============================================================================
-- USERS TABLE POLICIES
-- =============================================================================

-- Users can only view and update their own profile
CREATE POLICY "Users can view own profile" ON users
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON users
  FOR UPDATE USING (auth.uid() = id);

-- Allow user registration (insert)
CREATE POLICY "Enable insert for authentication" ON users
  FOR INSERT WITH CHECK (auth.uid() = id);

-- =============================================================================
-- VIDEOS TABLE POLICIES (User-owned learning materials)
-- =============================================================================

-- Users can view their own videos and public videos from other users
CREATE POLICY "Users can view own and public videos" ON videos
  FOR SELECT USING (
    auth.uid() = user_id OR 
    (is_public = true AND auth.role() = 'authenticated')
  );

-- Users can insert their own videos
CREATE POLICY "Users can insert own videos" ON videos
  FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Users can update their own videos
CREATE POLICY "Users can update own videos" ON videos
  FOR UPDATE USING (auth.uid() = user_id);

-- Users can delete their own videos
CREATE POLICY "Users can delete own videos" ON videos
  FOR DELETE USING (auth.uid() = user_id);

-- Service role can manage all videos (for admin/AI processing)
CREATE POLICY "Service role can manage all videos" ON videos
  FOR ALL USING (auth.role() = 'service_role');

-- =============================================================================
-- SEGMENTS TABLE POLICIES
-- =============================================================================

-- Users can view segments from their own videos and public videos
CREATE POLICY "Users can view accessible segments" ON segments
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM videos 
      WHERE videos.id = segments.video_id 
      AND (videos.user_id = auth.uid() OR videos.is_public = true)
    )
  );

-- Service role can manage all segments (generated by AI processing)
CREATE POLICY "Service role can manage segments" ON segments
  FOR ALL USING (auth.role() = 'service_role');

-- =============================================================================
-- PRACTICE_SESSIONS TABLE POLICIES
-- =============================================================================

-- Users can only access their own practice sessions
CREATE POLICY "Users can view own practice sessions" ON practice_sessions
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own practice sessions" ON practice_sessions
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own practice sessions" ON practice_sessions
  FOR UPDATE USING (auth.uid() = user_id);

-- Users can delete their own practice sessions
CREATE POLICY "Users can delete own practice sessions" ON practice_sessions
  FOR DELETE USING (auth.uid() = user_id);

-- =============================================================================
-- AUDIO_RECORDINGS TABLE POLICIES
-- =============================================================================

-- Users can only access audio recordings from their own practice sessions
CREATE POLICY "Users can view own audio recordings" ON audio_recordings
  FOR SELECT USING (
    auth.uid() = (
      SELECT user_id FROM practice_sessions 
      WHERE practice_sessions.id = audio_recordings.session_id
    )
  );

CREATE POLICY "Users can insert own audio recordings" ON audio_recordings
  FOR INSERT WITH CHECK (
    auth.uid() = (
      SELECT user_id FROM practice_sessions 
      WHERE practice_sessions.id = audio_recordings.session_id
    )
  );

CREATE POLICY "Users can update own audio recordings" ON audio_recordings
  FOR UPDATE USING (
    auth.uid() = (
      SELECT user_id FROM practice_sessions 
      WHERE practice_sessions.id = audio_recordings.session_id
    )
  );

CREATE POLICY "Users can delete own audio recordings" ON audio_recordings
  FOR DELETE USING (
    auth.uid() = (
      SELECT user_id FROM practice_sessions 
      WHERE practice_sessions.id = audio_recordings.session_id
    )
  );

-- =============================================================================
-- VOCABULARY_NOTES TABLE POLICIES
-- =============================================================================

-- Users can only access their own vocabulary notes
CREATE POLICY "Users can view own vocabulary notes" ON vocabulary_notes
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own vocabulary notes" ON vocabulary_notes
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own vocabulary notes" ON vocabulary_notes
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own vocabulary notes" ON vocabulary_notes
  FOR DELETE USING (auth.uid() = user_id);

-- =============================================================================
-- STORAGE POLICIES (for audio files)
-- =============================================================================

-- Create storage bucket for audio recordings if it doesn't exist
INSERT INTO storage.buckets (id, name, public) 
VALUES ('audio-recordings', 'audio-recordings', false)
ON CONFLICT (id) DO NOTHING;

-- Users can upload audio files to their own folder
CREATE POLICY "Users can upload own audio files" ON storage.objects
  FOR INSERT WITH CHECK (
    bucket_id = 'audio-recordings' AND 
    auth.uid()::text = (storage.foldername(name))[1]
  );

-- Users can view their own audio files
CREATE POLICY "Users can view own audio files" ON storage.objects
  FOR SELECT USING (
    bucket_id = 'audio-recordings' AND 
    auth.uid()::text = (storage.foldername(name))[1]
  );

-- Users can update their own audio files
CREATE POLICY "Users can update own audio files" ON storage.objects
  FOR UPDATE USING (
    bucket_id = 'audio-recordings' AND 
    auth.uid()::text = (storage.foldername(name))[1]
  );

-- Users can delete their own audio files
CREATE POLICY "Users can delete own audio files" ON storage.objects
  FOR DELETE USING (
    bucket_id = 'audio-recordings' AND 
    auth.uid()::text = (storage.foldername(name))[1]
  );

-- =============================================================================
-- ADDITIONAL SECURITY MEASURES
-- =============================================================================

-- Create indexes for better performance on RLS policies
CREATE INDEX IF NOT EXISTS idx_videos_user_id ON videos(user_id);
CREATE INDEX IF NOT EXISTS idx_videos_is_public ON videos(is_public);
CREATE INDEX IF NOT EXISTS idx_videos_processing_status ON videos(processing_status);
CREATE INDEX IF NOT EXISTS idx_practice_sessions_user_id ON practice_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_audio_recordings_session_id ON audio_recordings(session_id);
CREATE INDEX IF NOT EXISTS idx_vocabulary_notes_user_id ON vocabulary_notes(user_id);
CREATE INDEX IF NOT EXISTS idx_segments_video_id ON segments(video_id);

-- =============================================================================
-- FUNCTIONS FOR COMPLEX POLICIES
-- =============================================================================

-- Function to check if user owns a practice session
CREATE OR REPLACE FUNCTION user_owns_session(session_uuid UUID)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM practice_sessions 
    WHERE id = session_uuid AND user_id = auth.uid()
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get user's audio recording folder path
CREATE OR REPLACE FUNCTION get_user_audio_path()
RETURNS TEXT AS $$
BEGIN
  RETURN auth.uid()::text || '/';
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =============================================================================
-- REALTIME SUBSCRIPTIONS (for real-time features)
-- =============================================================================

-- Enable realtime for practice sessions (for progress tracking)
ALTER PUBLICATION supabase_realtime ADD TABLE practice_sessions;

-- Enable realtime for audio recordings (for live feedback)
ALTER PUBLICATION supabase_realtime ADD TABLE audio_recordings;

-- Enable realtime for vocabulary notes (for collaborative features)
ALTER PUBLICATION supabase_realtime ADD TABLE vocabulary_notes;

-- =============================================================================
-- COMMENTS AND DOCUMENTATION
-- =============================================================================

COMMENT ON POLICY "Users can view own profile" ON users IS 
'Users can only view their own profile data for privacy';

COMMENT ON POLICY "Users can view own and public videos" ON videos IS 
'Users can access their own videos and public videos shared by others';

COMMENT ON POLICY "Users can insert own videos" ON videos IS 
'Users can add their own learning materials via YouTube URLs';

COMMENT ON POLICY "Users can view own practice sessions" ON practice_sessions IS 
'Users can only access their own learning progress and sessions';

COMMENT ON POLICY "Users can view own audio recordings" ON audio_recordings IS 
'Users can only access audio recordings from their own practice sessions';

COMMENT ON POLICY "Users can view own vocabulary notes" ON vocabulary_notes IS 
'Users can only access their personal vocabulary notes and highlights';

-- =============================================================================
-- VERIFICATION QUERIES
-- =============================================================================

-- Use these queries to verify RLS policies are working correctly:

/*
-- Test 1: Verify user can only see their own data
SELECT * FROM practice_sessions; -- Should only return current user's sessions

-- Test 2: Verify videos are accessible to all authenticated users
SELECT * FROM videos; -- Should return all videos

-- Test 3: Verify segments are accessible to all authenticated users  
SELECT * FROM segments; -- Should return all segments

-- Test 4: Verify audio recordings are properly filtered
SELECT * FROM audio_recordings; -- Should only return user's recordings

-- Test 5: Verify vocabulary notes are properly filtered
SELECT * FROM vocabulary_notes; -- Should only return user's notes
*/
